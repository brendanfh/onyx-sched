package sched

use runtime
use core.heap {Heap}
use core {
    thread
    os
    io
    iter
    math
    sync
}

Scheduler.make :: () -> (out: Scheduler) {
    out._tasks = sync.MutexGuard.make(
        Heap.make(Task, (x, y) => cast(i32)(x.when - y.when))
    )
    out._allocator = context.allocator
    return
}

Scheduler.start :: (self: &Scheduler) {
    if self._running do return

    self._running = true
    thread.spawn(&self._executer, self, scheduler_thread)
}

Scheduler.stop :: (self: &Scheduler) {
    self._running = false
}

Scheduler.join :: (self: &Scheduler) {
    thread.join(&self._executer)
}

Scheduler.run :: (self: &Scheduler) {
    self->start()
    self->join()
}

Scheduler.once_at :: (self: &Scheduler, at: u64, func: (&T) -> void, arg: $T) -> u64 {
    id := self._next_id
    self._next_id += 1

    self._tasks->with([tasks] {
        tasks->insert(.{
            id, at, func,
            .{ new(arg, self._allocator), T }
        })
    })

    if self._running do self._alarm->wakeup()

    return id
}

Scheduler.once_in :: (self: &Scheduler, in_: u64, func: (&T) -> void, arg: $T) -> u64 {
    id := self._next_id
    self._next_id += 1

    self._tasks->with([tasks] {
        tasks->insert(.{
            id, in_ + os.time(), func,
            .{ new(arg, self._allocator), T }
        })
    })

    if self._running do self._alarm->wakeup()

    return id
}

Scheduler.every :: (self: &Scheduler, interval: u64, func: (&T) -> void, arg: $T, run_on_start := false) -> u64 {
    id := self._next_id
    self._next_id += 1

    self._tasks->with([tasks] {
        tasks->insert(.{
            id, os.time() + (interval if !run_on_start else 0),
            func,
            .{ new(arg, self._allocator), T },
            interval
        })
    })

    if self._running do self._alarm->wakeup()

    return id
}

Scheduler.every_at :: (
    self: &Scheduler,
    start_at: u64,
    interval: u64,
    func: (&T) -> void,
    arg: $T,
    run_on_start := false
) -> u64 {
    id := self._next_id
    self._next_id += 1

    self._tasks->with([tasks] {
        tasks->insert(.{
            id, start_at,
            func,
            .{ self._allocator->move(arg), T },
            interval
        })
    })

    if self._running do self._alarm->wakeup()

    return id
}

Scheduler.cancel :: (self: &Scheduler, id: u64) {
    self._tasks->with([tasks] {
        tasks->remove([t](t.id == id))
    })

    if self._current_task.id == id {
        self._cancel_task = true
    }
}


#local
scheduler_thread :: (scheduler: &Scheduler) {
    while scheduler._running {
        now:  i64 = os.time()
        next: i64 = now + 30000

        scheduler._tasks->with([tasks] {
            while true {
                maybe_task := tasks->peek_top()
                if !maybe_task do break

                t := maybe_task!
                if t.when > now do break

                tasks->remove_top()
                scheduler._current_task = &t

                // Should this be moved to another thread?
                t.func(t.arg.data)

                scheduler._current_task = null

                if scheduler._cancel_task {
                    scheduler._cancel_task = false
                    break
                }

                switch t.every {
                    case .Some as interval {
                        t.when += interval
                        tasks->insert(t)
                    }

                    case .None {
                        scheduler._allocator->free(t.arg.data)
                    }
                }
            }

            if tasks.data.count > 0 {
                next = tasks.data[0].when
            }
        })

        to_sleep := math.min(next - now, 30000)
        scheduler._alarm->sleep(~~to_sleep)
    }
}

